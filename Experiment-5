; ADC Registers
RCGCADC      EQU 0x400FE638 ; ADC clock register
; ADC0 base  address EQU 0x40038000
ADC0_ACTSS   EQU 0x40038000 ; Sample sequencer (ADC0 base address)
ADC0_RIS     EQU 0x40038004 ; Interrupt status
ADC0_IM      EQU 0x40038008 ; Interrupt select
ADC0_EMUX    EQU 0x40038014 ; Trigger select
ADC0_PSSI    EQU 0x40038028 ; Initiate sample
ADC0_SSMUX3  EQU 0x400380A0 ; Input channel select
ADC0_SSCTL3  EQU 0x400380A4 ; Sample sequence control
ADC0_SSFIFO3 EQU 0x400380A8 ; Channel 3 results
ADC0_PP      EQU 0x40038FC4 ; Sample rate
ADC0_ISC     EQU 0X4003800C	
; GPIO Registers 
RCGCGPIO     EQU 0x400FE608 ; GPIO clock register
;PORT E base address EQU 0x40024000
PORTE_DEN    EQU 0x4002451C ; Digital Enable
PORTE_DIR    EQU 0x40024400 ; Digital Enable	
PORTE_PCTL   EQU 0x4002452C ; Alternate function select
PORTE_AFSEL  EQU 0x40024420 ; Enable Alt functions
PORTE_AMSEL  EQU 0x40024528 ; Enable analog
										
			AREA 	main, CODE, READONLY
			THUMB
			EXPORT  __main
			EXTERN	ADC_INIT
				
__main		
			BL ADC_INIT

			LDR R3, =ADC0_RIS 
			LDR R4, =ADC0_SSFIFO3
			LDR R2, =ADC0_PSSI 
			LDR R6,= ADC0_ISC 
			LDR R5,=0X20000040
			
			; initiate sampling by enabling sequencer 
Smpl 		LDR R0, [R2]
			ORR R0, R0, #0x08 ; set bit 3 for SS3
			STR R0, [R2]
			; wait for sample complete
Cont	    LDR R0, [R3]
			ANDS R0, R0, #8
			BEQ Cont
			;flag is cleared
			MOV R0, #8
			STR R0, [R6] ; clear flag
			LDR R0,[R4];R0 holds the ATD value
STOP        B   STOP
				
			ALIGN	
			END
      ; ADC Registers
RCGCADC      EQU 0x400FE638 ; ADC clock register
; ADC0 base  address EQU 0x40038000
ADC0_ACTSS   EQU 0x40038000 ; Sample sequencer (ADC0 base address)
ADC0_RIS     EQU 0x40038004 ; Interrupt status
ADC0_IM      EQU 0x40038008 ; Interrupt select
ADC0_EMUX    EQU 0x40038014 ; Trigger select
ADC0_PSSI    EQU 0x40038028 ; Initiate sample
ADC0_SSMUX3  EQU 0x400380A0 ; Input channel select
ADC0_SSCTL3  EQU 0x400380A4 ; Sample sequence control
ADC0_SSFIFO3 EQU 0x400380A8 ; Channel 3 results
ADC0_PP      EQU 0x40038FC4 ; Sample rate
; GPIO Registers 

RCGCGPIO     EQU 0x400FE608 ; GPIO clock register
;PORT E base address EQU 0x40024000
PORTE_DEN    EQU 0x4002451C ; Digital Enable
PORTE_DIR    EQU 0x40024400 ; Digital Enable	
PORTE_PCTL   EQU 0x4002452C ; Alternate function select
PORTE_AFSEL  EQU 0x40024420 ; Enable Alt functions
PORTE_AMSEL  EQU 0x40024528 ; Enable analog
					
			AREA 	adcint, CODE, READONLY
			THUMB
			EXPORT	ADC_INIT
					


ADC_INIT	; Start clocks for features to be used
			LDR R1, =RCGCADC ; Turn on ADC clock
			LDR R0, [R1]
			ORR R0, R0, #0x01 ; set bit 0 to enable ADC0 clock
			STR R0, [R1]
			NOP
			NOP
			NOP ; Let clock stabilize
			LDR R1, =RCGCGPIO ; Turn on GPIO clock
			LDR R0, [R1]
			ORR R0, R0, #0x10 ; set bit 4 to enable port E clock
			STR R0, [R1]
			NOP
			NOP
			NOP ; Let clock stabilize
			; Setup GPIO to make PE3 input for ADC0
			; Enable alternate functions
			LDR R1, =PORTE_AFSEL
			LDR R0, [R1]
			ORR R0, R0, #0x08 ; set bit 3 to enable alt functions on PE3
			STR R0, [R1]
			; PCTL does not have to be configured
			; since ADC0 is automatically selected when
			; port pin is set to analog.
			; Disable digital on PE3
			LDR R1, =PORTE_DEN
			LDR R0, [R1]
			BIC R0, R0, #0x08 ; clear bit 3 to disable analog on PE3
			STR R0, [R1]
			; Enable analog on PE3
			LDR R1, =PORTE_AMSEL
			LDR R0, [R1]
			ORR R0, R0, #0x08 ; set bit 3 to enable analog on PE3
			STR R0, [R1]
			; Disable sequencer while ADC setup
			LDR R1, =ADC0_ACTSS
			LDR R0, [R1]
			BIC R0, R0, #0x08 ; clear bit 3 to disable seq 3
			STR R0, [R1] 
			; Select trigger source
			LDR R1, =ADC0_EMUX
			LDR R0, [R1]
			BIC R0, R0, #0xF000 ; clear bits 15:12 to select SOFTWARE
			STR R0, [R1] ; trigger
			; Select input channel
			LDR R1, =ADC0_SSMUX3
			LDR R0, [R1]
			BIC R0, R0, #0x000F ; clear bits 3:0 to select AIN0
			STR R0, [R1]
			; Config sample sequence
			LDR R1, =ADC0_SSCTL3
			LDR R0, [R1]
			ORR R0, R0, #0x06 ; set bits 2:1 (IE0, END0)
			STR R0, [R1]
			; Set sample rate
			LDR R1, =ADC0_PP
			LDR R0, [R1]
			ORR R0, R0, #0x01 ; set bits 3:0 to 1 for 125k sps
			STR R0, [R1]
			; Done with setup, enable sequencer
			LDR R1, =ADC0_ACTSS
			LDR R0, [R1]
			ORR R0, R0, #0x08 ; set bit 3 to enable seq 3
			STR R0, [R1] ; sampling enabled but not initiated yet		
			BX LR ; return
			ENDP
			END
      ;***************************************************************
; Program section					      
;***************************************************************
;LABEL		DIRECTIVE	VALUE		COMMENT
			AREA    	subroutines, READONLY, CODE
			THUMB
			EXPORT  	CONVRT	; Make available

CONVRT		PROC
	
			PUSH	{R0-R5}
			CBZ		R4,zero
			MOV		R2,#10			; Divider for decimal conversion
			MOV 	R1,#1000
			MOV		R0,#1000
			MUL		R0,R0
			MUL		R0,R1			; Set R0 to 10^9
			MOV		R1,#0x30		; Set R1 to 0x30 as an offset for ASCII
			B		compare_2		; Do not start with dividing R0
compare_1	UDIV	R0,R2			; Divide R0 if number is smaller than it
compare_2	CMP		R4,R0			
			BLT		compare_1
compare		CMP		R4,R0
			BGE		count
			STRB	R1,[R5],#1		; Store count as next ASCII character
			CMP		R4,#0			; End conversion if R4 is less than or equal to 0
			BLE		end_convrt
			UDIV	R0,R2
			MOV		R1,#0x30
			B	compare
count		SUB		R4,R0
			ADD		R1,#1			; Count how many R0 in R4
			B 		compare
zero		MOV     R1,#0X30
			STRB	R1,[R5],#1
end_convrt	cmp     r0,#10
			bne     skip
			mov 	r1,#0x30
			strb	r1,[r5],#1
skip		mov     r1,#117
			MOV		R1,#0x04		; End of transmission character
			STRB	R1,[R5]			
			POP		{R0-R5}
			
			BX		LR
			ENDP

;***************************************************************
; End of the program  section
;***************************************************************
;LABEL      DIRECTIVE       VALUE                           COMMENT
			ALIGN
			END

ADC0_ACTSS   EQU 0x40038000 ; Sample sequencer (ADC0 base address)
ADC0_RIS     EQU 0x40038004 ; Interrupt status
ADC0_IM      EQU 0x40038008 ; Interrupt select
ADC0_EMUX    EQU 0x40038014 ; Trigger select
ADC0_PSSI    EQU 0x40038028 ; Initiate sample
ADC0_SSMUX3  EQU 0x400380A0 ; Input channel select
ADC0_SSCTL3  EQU 0x400380A4 ; Sample sequence control
ADC0_SSFIFO3 EQU 0x400380A8 ; Channel 3 results
ADC0_PP      EQU 0x40038FC4 ; Sample rate
ADC0_ISC     EQU 0X4003800C	
; GPIO Registers 
RCGCGPIO     EQU 0x400FE608 ; GPIO clock register
;PORT E base address EQU 0x40024000
PORTE_DEN    EQU 0x4002451C ; Digital Enable
PORTE_DIR    EQU 0x40024400 ; Digital Enable	
PORTE_PCTL   EQU 0x4002452C ; Alternate function select
PORTE_AFSEL  EQU 0x40024420 ; Enable Alt functions
PORTE_AMSEL  EQU 0x40024528 ; Enable analog
										
			AREA 	main, CODE, READONLY
			THUMB
			EXPORT  __main
			EXTERN	ADC_INIT
			EXTERN	CONVRT
			EXTERN  OutStr
				
__main		
			BL ADC_INIT

			LDR R3, =ADC0_RIS 
			LDR R4, =ADC0_SSFIFO3
			LDR R2, =ADC0_PSSI 
			LDR R6,= ADC0_ISC 
			LDR R5,=0x20000480
			
			; initiate sampling by enabling sequencer 
Smpl 		LDR R0, [R2]
			ORR R0, R0, #0x08 ; set bit 3 for SS3
			STR R0, [R2]
			; wait for sampling completed
Cont	    LDR R0, [R3]
			ANDS R0, R0, #8
			BEQ Cont
			;flag is cleared
			MOV R0, #8
			STR R0, [R6] ; clear flag
			LDR R0,[R4];R0 holds the ATD value

            LDR R1,=0X0000014A;equlivant to 330
			MUL R0,R0,R1;multiply the ATD value by 330 
			LDR R1,=0X00000FFF;divide it by 4095
			UDIV R0,R0,R1;equal to 100 times of actual voltage value
			LDR R1,=0X00000064;division 100 to get first digit
			UDIV R4,R0,R1;FIRST DIGIT
			BL CONVRT
			BL OutStr
		    ;printing a dot after first digit
			PUSH {R1}
			MOV R2,#0x2E;ASCII value of dot
			STRB R2,[R5]
			MOV	R1,#0x04; End of transmission character
			STRB R1,[R5,#1]
			BL OutStr
			POP {R1};restore the initial ATD value
			;obtaining the remaining part and print it as a simple number		
			MUL R4,R4,R1
			SUB R0,R0,R4
			MOV R4,R0
			BL CONVRT
			BL OutStr
			
			ALIGN	
			END
      ADC0_ACTSS   EQU 0x40038000 ; Sample sequencer (ADC0 base address)
ADC0_RIS     EQU 0x40038004 ; Interrupt status
ADC0_IM      EQU 0x40038008 ; Interrupt select
ADC0_EMUX    EQU 0x40038014 ; Trigger select
ADC0_PSSI    EQU 0x40038028 ; Initiate sample
ADC0_SSMUX3  EQU 0x400380A0 ; Input channel select
ADC0_SSCTL3  EQU 0x400380A4 ; Sample sequence control
ADC0_SSFIFO3 EQU 0x400380A8 ; Channel 3 results
ADC0_PP      EQU 0x40038FC4 ; Sample rate
ADC0_ISC     EQU 0X4003800C	
; GPIO Registers 
RCGCGPIO     EQU 0x400FE608 ; GPIO clock register
;PORT E base address EQU 0x40024000
PORTE_DEN    EQU 0x4002451C ; Digital Enable
PORTE_DIR    EQU 0x40024400 ; Digital Enable	
PORTE_PCTL   EQU 0x4002452C ; Alternate function select
PORTE_AFSEL  EQU 0x40024420 ; Enable Alt functions
PORTE_AMSEL  EQU 0x40024528 ; Enable analog
										
			AREA 	main, CODE, READONLY
			THUMB
			EXPORT  __main
			EXTERN	ADC_INIT
			EXTERN	CONVRT
			EXTERN  OutStr
				
__main		
			BL ADC_INIT

again		LDR R3, =ADC0_RIS 
			LDR R4, =ADC0_SSFIFO3
			LDR R2, =ADC0_PSSI 
			LDR R6,= ADC0_ISC 
			LDR R5,=0x20000480
			
			; initiate sampling by enabling sequencer 
			LDR R0, [R2]
			ORR R0, R0, #0x08 ; set bit 3 for SS3
			STR R0, [R2]
			; wait sample complete
Contl	    LDR R0, [R3]
			ANDS R0, R0,#8
			BEQ Contl
			
			;stop sequencer			
			LDR R0,[R2]
			BIC R0, R0, #0X08
			STR R0,[R2]

			;flag is cleared	
			MOV R0, #8
			STR R0, [R6] ; clear flag
			
			CMP R7,#1    ;if this is the first time of printing a value
			BNE firstime ;then R7=0 and skip comparison part
					     ;else do comparison

			POP {R0};put first previous ATD value back
			LDR R2,[R4];new ATD value
			SUB R3,R0,R2;R6 is the previous value of ATD
			CMP R3,#248;comparing with 248(=0.2 V)
			BGT	firstime;if previous greater go print		
			SUB R3,R2,R0
			CMP R3,#248;if previous is less go print
			BGT firstime 
			PUSH {R0};else save previous and check again
			B   again
		
firstime	; initiate sampling by enabling sequencer 
			LDR R0,[R4];R0 holds the ATD value
			PUSH{R0}	
			
            LDR R1,=0X0000014A;equlivant to 330
			MUL R0,R0,R1
			LDR R1,=0X00000FFF
			UDIV R0,R0,R1;equal to 100 times of actual voltage value
			LDR R1,=0X00000064;DIVISON 100
			UDIV R4,R0,R1;FIRST DIGIT
			BL CONVRT
			BL OutStr
			
		    ;printing a dot after first digit
			PUSH {R1};save first ATD value
			MOV R2,#0x2E
			STRB R2,[R5]
			MOV	R1,#0x04; End of transmission character
			STRB R1,[R5,#1]
			BL OutStr
			POP {R1}
			;obtaining the remaining part and print it as a simple number		
			MUL R4,R4,R1
			SUB R0,R0,R4
			MOV R4,R0
			BL CONVRT
			BL OutStr
			
			PUSH {R1}
			MOV R2,#0x56;ascii of V(voltage)
			STRB R2,[R5]
			MOV R2,#0x0D
			STRB R2,[R5,#1]
			MOV	R1,#0x04; End of transmission character
			STRB R1,[R5,#2]
			BL OutStr
			POP {R1}
			
			MOV R7,#1
			B again

			ALIGN	
			END
		    
